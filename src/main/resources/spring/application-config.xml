<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/mvc      http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop      http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util     http://www.springframework.org/schema/util/spring-util-4.3.xsd
		http://www.springframework.org/schema/task     http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
	">
	
<!-- Spring config -->
	
	<!-- Use MVC annotations -->
	<mvc:annotation-driven>
		
		<mvc:argument-resolvers>
			<!-- Reference to authentication information [User defined UserDetails]
			 (definition required when referring to authentication information from controller) 
			 * When using from controller, use "@AuthenticationPrincipal" annotation as argument. -->
			<bean class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver"/>
			
			<!-- Get paging information
			 (used for automatic generation of Pagable objects from URL request parameters)
			 * When using from the controller, set the Pageable class as the argument of the controller.
			 * To use this function, specify the request URL as shown below.
			   URL: http://../xxx?page=2&size=10&sort=id -->
			<bean class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
		</mvc:argument-resolvers>
		
		<!-- Asynchronous -->
		<mvc:async-support default-timeout="60000" task-executor="taskExecutor">
			<!-- Bean definition for asynchronous common function (Callable [Java standard])
			 (current situation is not available) -->
			<mvc:callable-interceptors>
				<bean class="di.spring.async.CustomCallableProcessingInterceptor"/>
			</mvc:callable-interceptors>
			
			<!-- Bean definition for asynchronous common function (DeferredResult [Spring proprietary]) -->
			<mvc:deferred-result-interceptors>
				<bean class="di.spring.async.CustomDeferredResultProcessingInterceptor"/>
			</mvc:deferred-result-interceptors>
		</mvc:async-support>
		
		<!-- RESTfulAPI (not required when using default setting) -->
		<mvc:message-converters>
			<ref bean="mappingJackson2HttpMessageConverter"/>
		</mvc:message-converters>
		
	</mvc:annotation-driven>
	
	<!-- Static resource reference
	 * When defining in the configuration file in web.xml "context-param", setting of "<mvc:default-servlet-handler>" is necessary.
	   In this application, commented out because it changed to define it in the setting file of web.xml "<servlet> <init-param>"
	<mvc:default-servlet-handler/>
	<mvc:resources mapping="/sample/**" location="/sample"/> -->
	
	<!-- Component scan -->
	<context:component-scan base-package="di"/>
	
	<!-- Using AOP -->
	<aop:aspectj-autoproxy/>
	
	<!-- Bean definition for custom exception handler (error handler for entire application) -->
	<bean id="globalExceptionHandler" class="di.spring.handler.GlobalExceptionHandler"/>
	
<!-- Property File
	* This configuration file can be referenced with ${<key>}.
	* An instance obtained by DI can be referred to by @Value("${<key>}"). -->
	
	<!-- Single file pattern
	<context:property-placeholder location="classpath:application.properties"/> -->
	
	<!-- Multiple files pattern (1)
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
				<value>file:<path from project root>/sample.properties</value>
				<value>file:<absolute path>/sample.properties</value>
			</list>
		</property>
		<property name="searchSystemEnvironment" value="true"/>
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
		<property name="ignoreResourceNotFound" value="true"/>
	</bean>
	-->
	
	<!-- Multiple files pattern (2)
	 The property file specified by the environment variable is preferentially read.
	 If it does not exist, it reads the property file in the class path. -->
	
	<context:property-placeholder ignore-resource-not-found="true"
		location="file:${spring4mvcexample.configurationFile}" order="1" ignore-unresolvable="true" />
	
	<context:property-placeholder
		location="classpath:application.properties" order="2" ignore-unresolvable="true" />
	
<!-- Message Source -->
	
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:i18n/messages</value>				<!-- Message property for this application -->
				<value>classpath:i18n/ValidationMessages</value>	<!-- Message property for Hibernate Validator -->
			</list>
		</property>
		<property name="fallbackToSystemLocale" value="false"/>
		<!-- <property name="cacheSeconds" value="30" /> -->
		<!-- <property name="defaultEncoding" value="UTF-8"/> -->
	</bean>
	
<!-- Validation -->
	
	<!-- Bean definition for Validator Factory
	 * Configuration for referencing spring message resources. 
	 * This bean needs to be set in WebDataBinder within InitBinder annotation method of ControllerAdvice class. -->
	<bean name="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="validationMessageSource">
			<ref bean="messageSource"/>
		</property>
	</bean>
	
<!-- Data Source
	* Refer to some parameters from application.properties -->
	
	<!-- Apache Commons DBCP 2
	 * The current latest version 2.1.1 does not correspond to Java 8.
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url"			 value="${jdbc.url}"/>
		<property name="username"		 value="${jdbc.username}"/>
		<property name="password"		 value="${jdbc.password}"/>
		<property name="initialSize"	 value="${jdbc.initialSize}"/>
		<!- <property name="maxActive"	 value="${jdbc.maxActive}"/> ->	<!- * Tomcat 8:"maxTotal" ->
		<property name="maxTotal"		 value="${jdbc.maxActive}"/>
		<property name="maxIdle"		 value="${jdbc.maxIdle}"/>
		<property name="minIdle"		 value="${jdbc.minIdle}"/>
		<property name="validationQuery" value="${jdbc.validationQuery}"/>
		<!- * Measures against automatic disconnection of MySQL session ->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
	</bean> -->
	
	<!-- Tomcat JDBC Connection Pool -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url"			 value="${jdbc.url}"/>
		<property name="username"		 value="${jdbc.username}"/>
		<property name="password"		 value="${jdbc.password}"/>
		<property name="initialSize"	 value="${jdbc.initialSize}"/>
		<property name="maxActive"		 value="${jdbc.maxActive}"/>
		<property name="maxIdle"		 value="${jdbc.maxIdle}"/>
		<property name="minIdle"		 value="${jdbc.minIdle}"/>
		<property name="validationQuery" value="${jdbc.validationQuery}"/>
		<!-- * Measures against automatic disconnection of MySQL session -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
		<!-- JDBC Interceptors (set as necessary)
			 [default]
			   QueryTimeoutInterceptor.queryTimeout:1
			   StatementCache.prepared:true
			   StatementCache.callable:false
			   StatementCache.max:50
			   SlowQueryReport.threshold:1000
			   SlowQueryReport.maxQueries:1000 -->
		<property name="jdbcInterceptors" value="
			org.apache.tomcat.jdbc.pool.interceptor.QueryTimeoutInterceptor(queryTimeout=10);
			org.apache.tomcat.jdbc.pool.interceptor.StatementCache(prepared=true,callable=false,max=100);
			org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport(threshold=1000,maxQueries=200)"/>
	</bean>
	
<!-- Spring Data JPA/Hibernate
	* Refer to some parameters from application.properties -->
	
	<!-- JPA repository registration -->
	<jpa:repositories base-package="di.domain.repository"/>
	
	<!-- Bean definition for JPA EntityManager
	 * Warning
	  The following WARN log is output at the time of execution, because it is using connection pooling.
	  Therefore, even if the following log is output, there is basically no problem.
	 [class]
	  org.springframework.orm.jpa.vendor.HibernateJpaDialect
	 [method]
	  resetSessionState
	 [message]
	  JDBC Connection to reset not identical to originally prepared Connection - please make sure to use 
	  connection release mode ON_CLOSE (the default) and to run against Hibernate 4.2+ (or switch 
	  HibernateJpaDialect's prepareConnection flag to false -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="persistenceUnitName" value="persistenceUnit"/>
		<property name="packagesToScan" >
			<list>
				<value>domain.entity</value>
			</list>
		</property>
		<!-- Use Hibernate as a JPA vendor -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
		</property>
		<!-- Hibernate property -->
		<property name="jpaProperties">
			<props>
				<!-- <prop key="hibernate.archive.autodetection">class,hbm</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- <prop key="hibernate.connection.release_mode">auto</prop> -->
				<prop key="hibernate.connection.handling_mode">DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<!-- The following parameters is necessary when executing batch.
				 Also, it is necessary to execute flush() & clear() in the method of Repository class.
				 (as it is necessary to perform entity persistence by JPA) -->
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.order_inserts">true</prop>
				<prop key="hibernate.order_updates">true</prop>
			</props>
		</property>
	</bean>
	
	<!-- Bean definition for JPA TransactionManager -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>
	
<!-- Transaction -->
	
	<!-- Use Transactional annotations -->
	<tx:annotation-driven/>
	<!-- * When specifying a class instead of an interface
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/> -->
	
	<!-- Transaction advice (use AOP) -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="txGet*" propagation="REQUIRED" timeout="-1"
					   isolation="READ_UNCOMMITTED" read-only="true"/>
			<tx:method name="txFind*" propagation="REQUIRED" timeout="-1"
					   isolation="READ_UNCOMMITTED" read-only="true"/>
			<tx:method name="txSelect*" propagation="REQUIRED" timeout="-1"
					   isolation="READ_UNCOMMITTED" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED" timeout="-1"
					   isolation="READ_UNCOMMITTED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- Transaction target specification (use AOP) -->
	<aop:config>
		<!-- Set pointcut to the method of the following terms.
		 * Package class of the hierarchy under "di.domain".
		 * Classes and methods for which Transactional annotation is not set.
		 * The access modifier is public.
		 * The method name prefix is "tx". -->
		<aop:pointcut id="txOperation"
					  expression="execution(public * di.domain..*.tx*(..)) and 
								  not @annotation(org.springframework.transaction.annotation.Transactional) and 
								  not @target(org.springframework.transaction.annotation.Transactional)"/>
					  <!-- When specifying classes with Service annotation
					  expression="execution(public * di.domain..*.tx*(..)) and 
								  @target(org.springframework.stereotype.Service) and 
								  not @annotation(org.springframework.transaction.annotation.Transactional) and 
								  not @target(org.springframework.transaction.annotation.Transactional)"/> -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txOperation"/>
	</aop:config>
	
<!-- RESTfulAPI
	* Not required when using default setting. -->
	
	<bean id="mappingJackson2HttpMessageConverter"
		   class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="objectMapper">
			<bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
				<property name="indentOutput" value="true"/>
			</bean>
		</property>
	</bean>
	
<!-- Asynchronous & Task Scheduler -->
	
	<!-- Use asynchronous annotations & task scheduler annotations -->
	<task:annotation-driven/>
	
	<!-- Asynchronous & thread pool -->
	<task:executor id="taskExecutor" pool-size="5-10" queue-capacity="25" keep-alive="120"/>
	
	<!-- Task scheduler -->
	<task:scheduler id="taskScheduler" pool-size="5"/>
	
	<!-- Bean definition for task execution -->
	<bean id="scheduledTasks" class="di.app.task.ScheduledTasks"/>
	
</beans>
