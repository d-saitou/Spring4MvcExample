<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/util     http://www.springframework.org/schema/util/spring-util-4.3.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
	">
	
	<!-- Non-security config
		 * static resources does not require authorization. -->
	<sec:http pattern="/webjars/**" security="none"/>
	<sec:http pattern="/resources/**" security="none"/>
	
	<!-- Security config -->
	<sec:http auto-config="true" use-expressions="true">
		
		<!-- Authorization
		 ("*": only on the same hierarchy "**": all URLs below the specified hierarchy) -->
		<sec:intercept-url pattern="/" access="permitAll"/>
		<sec:intercept-url pattern="/login" access="permitAll" />
		<sec:intercept-url pattern="/logout" access="permitAll" />
		<sec:intercept-url pattern="/main" access="hasAuthority('SHOW_USER_PAGE')" />
		<sec:intercept-url pattern="/menu" access="hasAuthority('SHOW_USER_PAGE')" />
		<sec:intercept-url pattern="/views/common/*.jsp" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/queryparam" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/queryparam/**" access="hasAuthority('SHOW_USER_PAGE')"/>	<!-- for Parameters -->
		<sec:intercept-url pattern="/form/input/nonformobj" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/form/input/useformobj" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/form/validation" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/form/array" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/file/upload" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/file/upload/*" access="hasAuthority('SHOW_USER_PAGE')"/>	<!-- for POST -->
		<sec:intercept-url pattern="/file/download" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/db/select" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/db/insert" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/db/update" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/db/update/*" access="hasAuthority('SHOW_USER_PAGE')"/>		<!-- for POST -->
		<sec:intercept-url pattern="/db/delete" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/db/delete/*" access="hasAuthority('SHOW_USER_PAGE')"/>		<!-- for POST -->
		<sec:intercept-url pattern="/db/batchupdate" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/db/pagination" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/db/transaction" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/rest/text" access="permitAll"/>		<!-- publish REST-API -->
		<sec:intercept-url pattern="/rest/xml" access="permitAll"/>			<!-- publish REST-API -->
		<sec:intercept-url pattern="/rest/json" access="permitAll"/>		<!-- publish REST-API -->
		<sec:intercept-url pattern="/rest/jsonrequest" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/rest/jsonajaxrequest" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/scope/session/set" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/scope/session/ref" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/async/mail" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/task/history" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/resource/js" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/resource/webjars" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/authority/reference" access="hasAuthority('SHOW_ADMIN_PAGE')"/>
		<sec:intercept-url pattern="/authority/contentsbyauth" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/exception/null" access="hasAuthority('SHOW_USER_PAGE')"/>
		<sec:intercept-url pattern="/exception/illegal" access="hasAuthority('SHOW_USER_PAGE')"/>
		<!-- * When authorizing with multiple authorities
		<sec:intercept-url pattern="/sample" access="hasAnyAuthority('SHOW_USER_PAGE', 'SHOW_ADMIN_PAGE')"/>
		-->
		<sec:intercept-url pattern="/**" access="denyAll"/>
		<!-- <sec:intercept-url pattern="/**" access="permitAll"/> -->
		
		<!-- Authentication -->
		<sec:form-login
			login-page="/login"
			username-parameter="username"
			password-parameter="password"
			login-processing-url="/login"
			default-target-url="/main"
			authentication-failure-url="/login?error=auth-failure"
			always-use-default-target="true" />
		<sec:logout
			logout-url="/logout"
			logout-success-url="/"
			invalidate-session="true" />
		<sec:access-denied-handler error-page="/views/common/403.jsp" />
		<!-- <sec:anonymous granted-authority="ROLE_ANONYMOUS"/> -->
		
		<!-- Session management -->
		<sec:session-management session-fixation-protection="newSession"
								invalid-session-url="/login" />
		
		<!-- Response header -->
		<sec:headers defaults-disabled="true">
			<!-- Cache-Control -->
			<sec:cache-control disabled="false"/>
			<!-- X-Frame-Options (when using frame tag and iframe tag requires configulation) -->
			<sec:frame-options policy="SAMEORIGIN" />
			<!-- X-Content-Type-Options -->
			<sec:content-type-options disabled="false"/>
			<!-- X-XSS-Protection -->
			<sec:xss-protection disabled="false"/>
			<!-- Strict-Transport-Security -->
			<sec:hsts disabled="true"/>
		</sec:headers>
		
		<!-- CSRF measures
		 * When CSRF measures are effective, execute the POST from the <form> tag by setting the transmission 
		   parameters of the CSRF check. -->
		<sec:csrf/>
		
	</sec:http>
	
	<!-- Bean definition for authentication (when authenticating with proprietary implementation) -->
	<bean id="userDetailsService" class="di.spring.auth.UserDetailsServiceImpl"/>
	
	<!-- Bean definition for Password Encoder -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	<!-- Authentication manager config (when authenticating with proprietary implementation) -->
	<sec:authentication-manager>
		<sec:authentication-provider user-service-ref="userDetailsService">
			<sec:password-encoder ref="passwordEncoder" />
		</sec:authentication-provider>
	</sec:authentication-manager>
	
	<!-- Authentication manager config (when setting the user in the config file)
	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:user-service>
				<sec:user name="admin" password="admin" authorities="ROLE_ADMIN"/>
				<sec:user name="user"  password="user"  authorities="ROLE_USER"/>
			</sec:user-service>
		</sec:authentication-provider>
	</sec:authentication-manager>
	-->
	
	<!-- Handling when accessing without authentication -->
	<bean id="loginUrlAuthenticationEntryPoint"
		  class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<constructor-arg value="/login?error=without-auth" />
	</bean>
	
</beans>